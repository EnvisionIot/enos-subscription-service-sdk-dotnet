// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sub.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace enos_subscription.proto {

  /// <summary>Holder for reflection information generated from sub.proto</summary>
  public static partial class SubReflection {

    #region Descriptor
    /// <summary>File descriptor for sub.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SubReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglzdWIucHJvdG8SBXByb3RvIgkKB0lkbGVSZXEiGgoHSWRsZVJzcBIPCgdz",
            "dnJUaW1lGAEgAigDIkoKB0F1dGhSZXESEQoJYWNjZXNzS2V5GAEgAigJEg0K",
            "BXN1YklkGAIgAigJEgwKBHNpZ24YAyACKAkSDwoHc3ViVHlwZRgEIAIoBSI2",
            "CgdBdXRoUnNwEgsKA2FjaxgBIAIoBRILCgNtc2cYAiABKAkSEQoJY2hhbm5l",
            "bElkGAMgASgJImUKBlN1YlJlcRIQCghjYXRlZ29yeRgBIAIoBRIQCghjbGll",
            "bnRJZBgCIAIoCRINCgVzdWJJZBgDIAIoCRIRCglhY2Nlc3NLZXkYBCACKAkS",
            "FQoNY29uc3VtZXJHcm91cBgFIAIoCSI1CgZTdWJSc3ASCwoDYWNrGAEgAigF",
            "EhEKCWNoYW5uZWxJZBgCIAEoCRILCgNtc2cYAyABKAkiFQoHUHVsbFJlcRIK",
            "CgJpZBgBIAIoAyJqCgdNZXNzYWdlEg0KBXRvcGljGAEgAigJEhEKCXBhcnRp",
            "dGlvbhgCIAIoBRIOCgZvZmZzZXQYAyACKAMSEQoJdGltZXN0YW1wGAQgAigD",
            "EgsKA2tleRgFIAEoCRINCgV2YWx1ZRgGIAEoCSIuCgpNZXNzYWdlRFRPEiAK",
            "CG1lc3NhZ2VzGAEgAygLMg4ucHJvdG8uTWVzc2FnZSJGCgdQdWxsUnNwEgoK",
            "AmlkGAEgAigDEgwKBGNvZGUYAiACKAUSIQoGbXNnRFRPGAMgAigLMhEucHJv",
            "dG8uTWVzc2FnZURUTyI6CgZDb21taXQSDQoFdG9waWMYASACKAkSEQoJcGFy",
            "dGl0aW9uGAIgAigFEg4KBm9mZnNldBgDIAIoAyIrCglDb21taXREVE8SHgoH",
            "Y29tbWl0cxgBIAMoCzINLnByb3RvLkNvbW1pdCIWCghDbG9zZVJlcRIKCgJp",
            "ZBgBIAIoAyqzAQoFQ21kSWQSDAoIaWRsZV9yZXEQABIMCghpZGxlX3JzcBAB",
            "EgwKCGF1dGhfcmVxEAISDAoIYXV0aF9yc3AQAxIMCghwdWxsX3JlcRAEEgwK",
            "CHB1bGxfcnNwEAUSCwoHc3ViX3JlcRAGEgsKB3N1Yl9yc3AQBxIOCgpjb21t",
            "aXRfcmVxEAgSDgoKY29tbWl0X3JzcBAJEg0KCWNsb3NlX3JlcRAKEg0KCWNs",
            "b3NlX3JzcBALQiKqAh9lbm9zX3N1YnNjcmlwdGlvbl9zZXJ2aWNlLnByb3Rv"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::enos_subscription_service.proto.CmdId), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.IdleReq), global::enos_subscription_service.proto.IdleReq.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.IdleRsp), global::enos_subscription_service.proto.IdleRsp.Parser, new[]{ "SvrTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.AuthReq), global::enos_subscription_service.proto.AuthReq.Parser, new[]{ "AccessKey", "SubId", "Sign", "SubType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.AuthRsp), global::enos_subscription_service.proto.AuthRsp.Parser, new[]{ "Ack", "Msg", "ChannelId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.SubReq), global::enos_subscription_service.proto.SubReq.Parser, new[]{ "Category", "ClientId", "SubId", "AccessKey", "ConsumerGroup" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.SubRsp), global::enos_subscription_service.proto.SubRsp.Parser, new[]{ "Ack", "ChannelId", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.PullReq), global::enos_subscription_service.proto.PullReq.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.Message), global::enos_subscription_service.proto.Message.Parser, new[]{ "Topic", "Partition", "Offset", "Timestamp", "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.MessageDTO), global::enos_subscription_service.proto.MessageDTO.Parser, new[]{ "Messages" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.PullRsp), global::enos_subscription_service.proto.PullRsp.Parser, new[]{ "Id", "Code", "MsgDTO" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.Commit), global::enos_subscription_service.proto.Commit.Parser, new[]{ "Topic", "Partition", "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.CommitDTO), global::enos_subscription_service.proto.CommitDTO.Parser, new[]{ "Commits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.CloseReq), global::enos_subscription_service.proto.CloseReq.Parser, new[]{ "Id" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CmdId {
    [pbr::OriginalName("idle_req")] IdleReq = 0,
    [pbr::OriginalName("idle_rsp")] IdleRsp = 1,
    [pbr::OriginalName("auth_req")] AuthReq = 2,
    [pbr::OriginalName("auth_rsp")] AuthRsp = 3,
    [pbr::OriginalName("pull_req")] PullReq = 4,
    [pbr::OriginalName("pull_rsp")] PullRsp = 5,
    [pbr::OriginalName("sub_req")] SubReq = 6,
    [pbr::OriginalName("sub_rsp")] SubRsp = 7,
    [pbr::OriginalName("commit_req")] CommitReq = 8,
    [pbr::OriginalName("commit_rsp")] CommitRsp = 9,
    [pbr::OriginalName("close_req")] CloseReq = 10,
    [pbr::OriginalName("close_rsp")] CloseRsp = 11,
  }

  #endregion

  #region Messages
  public sealed partial class IdleReq : pb::IMessage<IdleReq> {
    private static readonly pb::MessageParser<IdleReq> _parser = new pb::MessageParser<IdleReq>(() => new IdleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleReq(IdleReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleReq Clone() {
      return new IdleReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdleReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class IdleRsp : pb::IMessage<IdleRsp> {
    private static readonly pb::MessageParser<IdleRsp> _parser = new pb::MessageParser<IdleRsp>(() => new IdleRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdleRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleRsp(IdleRsp other) : this() {
      _hasBits0 = other._hasBits0;
      svrTime_ = other.svrTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleRsp Clone() {
      return new IdleRsp(this);
    }

    /// <summary>Field number for the "svrTime" field.</summary>
    public const int SvrTimeFieldNumber = 1;
    private readonly static long SvrTimeDefaultValue = 0L;

    private long svrTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SvrTime {
      get { if ((_hasBits0 & 1) != 0) { return svrTime_; } else { return SvrTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        svrTime_ = value;
      }
    }
    /// <summary>Gets whether the "svrTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSvrTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "svrTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSvrTime() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdleRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdleRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SvrTime != other.SvrTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSvrTime) hash ^= SvrTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSvrTime) {
        output.WriteRawTag(8);
        output.WriteInt64(SvrTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSvrTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SvrTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdleRsp other) {
      if (other == null) {
        return;
      }
      if (other.HasSvrTime) {
        SvrTime = other.SvrTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SvrTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthReq : pb::IMessage<AuthReq> {
    private static readonly pb::MessageParser<AuthReq> _parser = new pb::MessageParser<AuthReq>(() => new AuthReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthReq(AuthReq other) : this() {
      _hasBits0 = other._hasBits0;
      accessKey_ = other.accessKey_;
      subId_ = other.subId_;
      sign_ = other.sign_;
      subType_ = other.subType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthReq Clone() {
      return new AuthReq(this);
    }

    /// <summary>Field number for the "accessKey" field.</summary>
    public const int AccessKeyFieldNumber = 1;
    private readonly static string AccessKeyDefaultValue = "";

    private string accessKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string accessKey
        {
      get { return accessKey_ ?? AccessKeyDefaultValue; }
      set {
        accessKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "accessKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccessKey {
      get { return accessKey_ != null; }
    }
    /// <summary>Clears the value of the "accessKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccessKey() {
      accessKey_ = null;
    }

    /// <summary>Field number for the "subId" field.</summary>
    public const int SubIdFieldNumber = 2;
    private readonly static string SubIdDefaultValue = "";

    private string subId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string subId
        {
      get { return subId_ ?? SubIdDefaultValue; }
      set {
        subId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "subId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubId {
      get { return subId_ != null; }
    }
    /// <summary>Clears the value of the "subId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubId() {
      subId_ = null;
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 3;
    private readonly static string SignDefaultValue = "";

    private string sign_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_ ?? SignDefaultValue; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sign" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSign {
      get { return sign_ != null; }
    }
    /// <summary>Clears the value of the "sign" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSign() {
      sign_ = null;
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 4;
    private readonly static int SubTypeDefaultValue = 0;

    private int subType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubType {
      get { if ((_hasBits0 & 1) != 0) { return subType_; } else { return SubTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subType_ = value;
      }
    }
    /// <summary>Gets whether the "subType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessKey != other.AccessKey) return false;
      if (SubId != other.SubId) return false;
      if (Sign != other.Sign) return false;
      if (SubType != other.SubType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAccessKey) hash ^= AccessKey.GetHashCode();
      if (HasSubId) hash ^= SubId.GetHashCode();
      if (HasSign) hash ^= Sign.GetHashCode();
      if (HasSubType) hash ^= SubType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAccessKey) {
        output.WriteRawTag(10);
        output.WriteString(AccessKey);
      }
      if (HasSubId) {
        output.WriteRawTag(18);
        output.WriteString(SubId);
      }
      if (HasSign) {
        output.WriteRawTag(26);
        output.WriteString(Sign);
      }
      if (HasSubType) {
        output.WriteRawTag(32);
        output.WriteInt32(SubType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAccessKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessKey);
      }
      if (HasSubId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubId);
      }
      if (HasSign) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (HasSubType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthReq other) {
      if (other == null) {
        return;
      }
      if (other.HasAccessKey) {
        AccessKey = other.AccessKey;
      }
      if (other.HasSubId) {
        SubId = other.SubId;
      }
      if (other.HasSign) {
        Sign = other.Sign;
      }
      if (other.HasSubType) {
        SubType = other.SubType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessKey = input.ReadString();
            break;
          }
          case 18: {
            SubId = input.ReadString();
            break;
          }
          case 26: {
            Sign = input.ReadString();
            break;
          }
          case 32: {
            SubType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRsp : pb::IMessage<AuthRsp> {
    private static readonly pb::MessageParser<AuthRsp> _parser = new pb::MessageParser<AuthRsp>(() => new AuthRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRsp(AuthRsp other) : this() {
      _hasBits0 = other._hasBits0;
      ack_ = other.ack_;
      msg_ = other.msg_;
      channelId_ = other.channelId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRsp Clone() {
      return new AuthRsp(this);
    }

    /// <summary>Field number for the "ack" field.</summary>
    public const int AckFieldNumber = 1;
    private readonly static int AckDefaultValue = 0;

    private int ack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ack {
      get { if ((_hasBits0 & 1) != 0) { return ack_; } else { return AckDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ack_ = value;
      }
    }
    /// <summary>Gets whether the "ack" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAck {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ack" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAck() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private readonly static string MsgDefaultValue = "";

    private string msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_ ?? MsgDefaultValue; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "msg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsg {
      get { return msg_ != null; }
    }
    /// <summary>Clears the value of the "msg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msg_ = null;
    }

    /// <summary>Field number for the "channelId" field.</summary>
    public const int ChannelIdFieldNumber = 3;
    private readonly static string ChannelIdDefaultValue = "";

    private string channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_ ?? ChannelIdDefaultValue; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "channelId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelId {
      get { return channelId_ != null; }
    }
    /// <summary>Clears the value of the "channelId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelId() {
      channelId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ack != other.Ack) return false;
      if (Msg != other.Msg) return false;
      if (ChannelId != other.ChannelId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAck) hash ^= Ack.GetHashCode();
      if (HasMsg) hash ^= Msg.GetHashCode();
      if (HasChannelId) hash ^= ChannelId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAck) {
        output.WriteRawTag(8);
        output.WriteInt32(Ack);
      }
      if (HasMsg) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (HasChannelId) {
        output.WriteRawTag(26);
        output.WriteString(ChannelId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAck) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ack);
      }
      if (HasMsg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (HasChannelId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRsp other) {
      if (other == null) {
        return;
      }
      if (other.HasAck) {
        Ack = other.Ack;
      }
      if (other.HasMsg) {
        Msg = other.Msg;
      }
      if (other.HasChannelId) {
        ChannelId = other.ChannelId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ack = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 26: {
            ChannelId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubReq : pb::IMessage<SubReq> {
    private static readonly pb::MessageParser<SubReq> _parser = new pb::MessageParser<SubReq>(() => new SubReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubReq(SubReq other) : this() {
      _hasBits0 = other._hasBits0;
      category_ = other.category_;
      clientId_ = other.clientId_;
      subId_ = other.subId_;
      accessKey_ = other.accessKey_;
      consumerGroup_ = other.consumerGroup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubReq Clone() {
      return new SubReq(this);
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 1;
    private readonly static int CategoryDefaultValue = 0;

    private int category_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Category {
      get { if ((_hasBits0 & 1) != 0) { return category_; } else { return CategoryDefaultValue; } }
      set {
        _hasBits0 |= 1;
        category_ = value;
      }
    }
    /// <summary>Gets whether the "category" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCategory {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "category" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCategory() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clientId" field.</summary>
    public const int ClientIdFieldNumber = 2;
    private readonly static string ClientIdDefaultValue = "";

    private string clientId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_ ?? ClientIdDefaultValue; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "clientId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientId {
      get { return clientId_ != null; }
    }
    /// <summary>Clears the value of the "clientId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientId() {
      clientId_ = null;
    }

    /// <summary>Field number for the "subId" field.</summary>
    public const int SubIdFieldNumber = 3;
    private readonly static string SubIdDefaultValue = "";

    private string subId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubId {
      get { return subId_ ?? SubIdDefaultValue; }
      set {
        subId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "subId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubId {
      get { return subId_ != null; }
    }
    /// <summary>Clears the value of the "subId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubId() {
      subId_ = null;
    }

    /// <summary>Field number for the "accessKey" field.</summary>
    public const int AccessKeyFieldNumber = 4;
    private readonly static string AccessKeyDefaultValue = "";

    private string accessKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessKey {
      get { return accessKey_ ?? AccessKeyDefaultValue; }
      set {
        accessKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "accessKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAccessKey {
      get { return accessKey_ != null; }
    }
    /// <summary>Clears the value of the "accessKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAccessKey() {
      accessKey_ = null;
    }

    /// <summary>Field number for the "consumerGroup" field.</summary>
    public const int ConsumerGroupFieldNumber = 5;
    private readonly static string ConsumerGroupDefaultValue = "";

    private string consumerGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerGroup {
      get { return consumerGroup_ ?? ConsumerGroupDefaultValue; }
      set {
        consumerGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "consumerGroup" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerGroup {
      get { return consumerGroup_ != null; }
    }
    /// <summary>Clears the value of the "consumerGroup" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerGroup() {
      consumerGroup_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Category != other.Category) return false;
      if (ClientId != other.ClientId) return false;
      if (SubId != other.SubId) return false;
      if (AccessKey != other.AccessKey) return false;
      if (ConsumerGroup != other.ConsumerGroup) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCategory) hash ^= Category.GetHashCode();
      if (HasClientId) hash ^= ClientId.GetHashCode();
      if (HasSubId) hash ^= SubId.GetHashCode();
      if (HasAccessKey) hash ^= AccessKey.GetHashCode();
      if (HasConsumerGroup) hash ^= ConsumerGroup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCategory) {
        output.WriteRawTag(8);
        output.WriteInt32(Category);
      }
      if (HasClientId) {
        output.WriteRawTag(18);
        output.WriteString(ClientId);
      }
      if (HasSubId) {
        output.WriteRawTag(26);
        output.WriteString(SubId);
      }
      if (HasAccessKey) {
        output.WriteRawTag(34);
        output.WriteString(AccessKey);
      }
      if (HasConsumerGroup) {
        output.WriteRawTag(42);
        output.WriteString(ConsumerGroup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCategory) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Category);
      }
      if (HasClientId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      if (HasSubId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubId);
      }
      if (HasAccessKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessKey);
      }
      if (HasConsumerGroup) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerGroup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubReq other) {
      if (other == null) {
        return;
      }
      if (other.HasCategory) {
        Category = other.Category;
      }
      if (other.HasClientId) {
        ClientId = other.ClientId;
      }
      if (other.HasSubId) {
        SubId = other.SubId;
      }
      if (other.HasAccessKey) {
        AccessKey = other.AccessKey;
      }
      if (other.HasConsumerGroup) {
        ConsumerGroup = other.ConsumerGroup;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Category = input.ReadInt32();
            break;
          }
          case 18: {
            ClientId = input.ReadString();
            break;
          }
          case 26: {
            SubId = input.ReadString();
            break;
          }
          case 34: {
            AccessKey = input.ReadString();
            break;
          }
          case 42: {
            ConsumerGroup = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubRsp : pb::IMessage<SubRsp> {
    private static readonly pb::MessageParser<SubRsp> _parser = new pb::MessageParser<SubRsp>(() => new SubRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubRsp(SubRsp other) : this() {
      _hasBits0 = other._hasBits0;
      ack_ = other.ack_;
      channelId_ = other.channelId_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubRsp Clone() {
      return new SubRsp(this);
    }

    /// <summary>Field number for the "ack" field.</summary>
    public const int AckFieldNumber = 1;
    private readonly static int AckDefaultValue = 0;

    private int ack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ack {
      get { if ((_hasBits0 & 1) != 0) { return ack_; } else { return AckDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ack_ = value;
      }
    }
    /// <summary>Gets whether the "ack" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAck {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ack" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAck() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "channelId" field.</summary>
    public const int ChannelIdFieldNumber = 2;
    private readonly static string ChannelIdDefaultValue = "";

    private string channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_ ?? ChannelIdDefaultValue; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "channelId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannelId {
      get { return channelId_ != null; }
    }
    /// <summary>Clears the value of the "channelId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannelId() {
      channelId_ = null;
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private readonly static string MsgDefaultValue = "";

    private string msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_ ?? MsgDefaultValue; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "msg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsg {
      get { return msg_ != null; }
    }
    /// <summary>Clears the value of the "msg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ack != other.Ack) return false;
      if (ChannelId != other.ChannelId) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAck) hash ^= Ack.GetHashCode();
      if (HasChannelId) hash ^= ChannelId.GetHashCode();
      if (HasMsg) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAck) {
        output.WriteRawTag(8);
        output.WriteInt32(Ack);
      }
      if (HasChannelId) {
        output.WriteRawTag(18);
        output.WriteString(ChannelId);
      }
      if (HasMsg) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAck) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ack);
      }
      if (HasChannelId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (HasMsg) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubRsp other) {
      if (other == null) {
        return;
      }
      if (other.HasAck) {
        Ack = other.Ack;
      }
      if (other.HasChannelId) {
        ChannelId = other.ChannelId;
      }
      if (other.HasMsg) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ack = input.ReadInt32();
            break;
          }
          case 18: {
            ChannelId = input.ReadString();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PullReq : pb::IMessage<PullReq> {
    private static readonly pb::MessageParser<PullReq> _parser = new pb::MessageParser<PullReq>(() => new PullReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PullReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullReq(PullReq other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullReq Clone() {
      return new PullReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static long IdDefaultValue = 0L;

    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PullReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PullReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PullReq other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      _hasBits0 = other._hasBits0;
      topic_ = other.topic_;
      partition_ = other.partition_;
      offset_ = other.offset_;
      timestamp_ = other.timestamp_;
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private readonly static string TopicDefaultValue = "";

    private string topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? TopicDefaultValue; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "partition" field.</summary>
    public const int PartitionFieldNumber = 2;
    private readonly static int PartitionDefaultValue = 0;

    private int partition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Partition {
      get { if ((_hasBits0 & 1) != 0) { return partition_; } else { return PartitionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        partition_ = value;
      }
    }
    /// <summary>Gets whether the "partition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartition {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "partition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartition() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 3;
    private readonly static long OffsetDefaultValue = 0L;

    private long offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { if ((_hasBits0 & 2) != 0) { return offset_; } else { return OffsetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        offset_ = value;
      }
    }
    /// <summary>Gets whether the "offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOffset {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOffset() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private readonly static long TimestampDefaultValue = 0L;

    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { if ((_hasBits0 & 4) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 5;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 6;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (Partition != other.Partition) return false;
      if (Offset != other.Offset) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (HasPartition) hash ^= Partition.GetHashCode();
      if (HasOffset) hash ^= Offset.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTopic) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (HasPartition) {
        output.WriteRawTag(16);
        output.WriteInt32(Partition);
      }
      if (HasOffset) {
        output.WriteRawTag(24);
        output.WriteInt64(Offset);
      }
      if (HasTimestamp) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (HasKey) {
        output.WriteRawTag(42);
        output.WriteString(Key);
      }
      if (HasValue) {
        output.WriteRawTag(50);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (HasPartition) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Partition);
      }
      if (HasOffset) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.HasPartition) {
        Partition = other.Partition;
      }
      if (other.HasOffset) {
        Offset = other.Offset;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 16: {
            Partition = input.ReadInt32();
            break;
          }
          case 24: {
            Offset = input.ReadInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 42: {
            Key = input.ReadString();
            break;
          }
          case 50: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageDTO : pb::IMessage<MessageDTO> {
    private static readonly pb::MessageParser<MessageDTO> _parser = new pb::MessageParser<MessageDTO>(() => new MessageDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDTO(MessageDTO other) : this() {
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageDTO Clone() {
      return new MessageDTO(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::enos_subscription_service.proto.Message> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::enos_subscription_service.proto.Message.Parser);
    private readonly pbc::RepeatedField<global::enos_subscription_service.proto.Message> messages_ = new pbc::RepeatedField<global::enos_subscription_service.proto.Message>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::enos_subscription_service.proto.Message> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageDTO other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PullRsp : pb::IMessage<PullRsp> {
    private static readonly pb::MessageParser<PullRsp> _parser = new pb::MessageParser<PullRsp>(() => new PullRsp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PullRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullRsp(PullRsp other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      code_ = other.code_;
      msgDTO_ = other.HasMsgDTO ? other.msgDTO_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PullRsp Clone() {
      return new PullRsp(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static long IdDefaultValue = 0L;

    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { if ((_hasBits0 & 2) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "msgDTO" field.</summary>
    public const int MsgDTOFieldNumber = 3;
    private global::enos_subscription_service.proto.MessageDTO msgDTO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::enos_subscription_service.proto.MessageDTO MsgDTO {
      get { return msgDTO_; }
      set {
        msgDTO_ = value;
      }
    }
    /// <summary>Gets whether the msgDTO field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsgDTO {
      get { return msgDTO_ != null; }
    }
    /// <summary>Clears the value of the msgDTO field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgDTO() {
      msgDTO_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PullRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PullRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Code != other.Code) return false;
      if (!object.Equals(MsgDTO, other.MsgDTO)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasMsgDTO) hash ^= MsgDTO.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (HasCode) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
      if (HasMsgDTO) {
        output.WriteRawTag(26);
        output.WriteMessage(MsgDTO);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasMsgDTO) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MsgDTO);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PullRsp other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasMsgDTO) {
        if (!HasMsgDTO) {
          MsgDTO = new global::enos_subscription_service.proto.MessageDTO();
        }
        MsgDTO.MergeFrom(other.MsgDTO);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
          case 26: {
            if (!HasMsgDTO) {
              MsgDTO = new global::enos_subscription_service.proto.MessageDTO();
            }
            input.ReadMessage(MsgDTO);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Commit : pb::IMessage<Commit> {
    private static readonly pb::MessageParser<Commit> _parser = new pb::MessageParser<Commit>(() => new Commit());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Commit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commit(Commit other) : this() {
      _hasBits0 = other._hasBits0;
      topic_ = other.topic_;
      partition_ = other.partition_;
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Commit Clone() {
      return new Commit(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private readonly static string TopicDefaultValue = "";

    private string topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? TopicDefaultValue; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "partition" field.</summary>
    public const int PartitionFieldNumber = 2;
    private readonly static int PartitionDefaultValue = 0;

    private int partition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Partition {
      get { if ((_hasBits0 & 1) != 0) { return partition_; } else { return PartitionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        partition_ = value;
      }
    }
    /// <summary>Gets whether the "partition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartition {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "partition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartition() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 3;
    private readonly static long OffsetDefaultValue = 0L;

    private long offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { if ((_hasBits0 & 2) != 0) { return offset_; } else { return OffsetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        offset_ = value;
      }
    }
    /// <summary>Gets whether the "offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOffset {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOffset() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Commit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Commit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (Partition != other.Partition) return false;
      if (Offset != other.Offset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (HasPartition) hash ^= Partition.GetHashCode();
      if (HasOffset) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTopic) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (HasPartition) {
        output.WriteRawTag(16);
        output.WriteInt32(Partition);
      }
      if (HasOffset) {
        output.WriteRawTag(24);
        output.WriteInt64(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (HasPartition) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Partition);
      }
      if (HasOffset) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Commit other) {
      if (other == null) {
        return;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.HasPartition) {
        Partition = other.Partition;
      }
      if (other.HasOffset) {
        Offset = other.Offset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 16: {
            Partition = input.ReadInt32();
            break;
          }
          case 24: {
            Offset = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommitDTO : pb::IMessage<CommitDTO> {
    private static readonly pb::MessageParser<CommitDTO> _parser = new pb::MessageParser<CommitDTO>(() => new CommitDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitDTO(CommitDTO other) : this() {
      commits_ = other.commits_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitDTO Clone() {
      return new CommitDTO(this);
    }

    /// <summary>Field number for the "commits" field.</summary>
    public const int CommitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::enos_subscription_service.proto.Commit> _repeated_commits_codec
        = pb::FieldCodec.ForMessage(10, global::enos_subscription_service.proto.Commit.Parser);
    private readonly pbc::RepeatedField<global::enos_subscription_service.proto.Commit> commits_ = new pbc::RepeatedField<global::enos_subscription_service.proto.Commit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::enos_subscription_service.proto.Commit> Commits {
      get { return commits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commits_.Equals(other.commits_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commits_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commits_.WriteTo(output, _repeated_commits_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commits_.CalculateSize(_repeated_commits_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitDTO other) {
      if (other == null) {
        return;
      }
      commits_.Add(other.commits_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commits_.AddEntriesFrom(input, _repeated_commits_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseReq : pb::IMessage<CloseReq> {
    private static readonly pb::MessageParser<CloseReq> _parser = new pb::MessageParser<CloseReq>(() => new CloseReq());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.SubReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseReq(CloseReq other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseReq Clone() {
      return new CloseReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static long IdDefaultValue = 0L;

    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseReq other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
