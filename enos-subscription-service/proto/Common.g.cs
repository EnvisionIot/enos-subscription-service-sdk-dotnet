// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace enos_subscription_service.proto {

  /// <summary>Holder for reflection information generated from common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb21tb24ucHJvdG8SBXByb3RvIlMKC1RyYW5zZmVyUGtnEg0KBWNtZElk",
            "GAEgAigFEgwKBGRhdGEYAiACKAwSDQoFc2VxSWQYAyACKAUSCwoDemlwGAQg",
            "ASgIEgsKA3ZlchgFIAEoDSJRCghBc3RlclBrZxINCgVzZXFubxgBIAIoBRIN",
            "CgVhY2tubxgCIAIoBRIMCgRmbGFnGAMgASgFEgsKA3duZBgEIAEoBRIMCgRk",
            "YXRhGAcgAygMIg0KC1RyYW5zZmVyQWNrIicKCVBvaW50QXR0chILCgNrZXkY",
            "ASACKAkSDQoFdmFsdWUYAiACKAkiMAoMU2xpY2VUcmlnZ2VyEg4KBmlzU2Ft",
            "ZRgBIAIoCBIQCghzbGljZUxlbhgCIAIoAyKFAQoJS1ZQYWlyMl8wEg0KBXBv",
            "aW50GAEgAigJEg0KBXZhbHVlGAIgAigJEg4KBmRvbWFpbhgDIAIoCRIfCgVh",
            "dHRycxgEIAMoCzIQLnByb3RvLlBvaW50QXR0chIpCgxzbGljZVRyaWdnZXIY",
            "BSADKAsyEy5wcm90by5TbGljZVRyaWdnZXIiQgoPS1ZQYWlyRGV2aWNlMl8w",
            "Eh8KBWRhdGFzGAEgAygLMhAucHJvdG8uS1ZQYWlyMl8wEg4KBmRldmljZRgC",
            "IAIoCSJlCg9LVlBhaXJSZWNvcmQyXzASEwoLY29sbGVjdFRpbWUYASACKAMS",
            "KwoLZGV2aWNlRGF0YXMYAiADKAsyFi5wcm90by5LVlBhaXJEZXZpY2UyXzAS",
            "EAoIc2VuZFRpbWUYAyACKAMiaQoGS1ZQYWlyEhAKCGRldmljZUlkGAEgAigJ",
            "Eg0KBXBvaW50GAIgAigJEg0KBXZhbHVlGAMgAigJEh8KBWF0dHJzGAQgAygL",
            "MhAucHJvdG8uUG9pbnRBdHRyEg4KBmRvbWFpbhgFIAIoCSJFCgxLVlBhaXJS",
            "ZWNvcmQSCwoDdXRjGAEgAigDEhwKBWRhdGFzGAIgAygLMg0ucHJvdG8uS1ZQ",
            "YWlyEgoKAnRzGAMgASgDKikKDUNvbW1vbk1zZ1R5cGUSGAoURU5VTV9LVlBh",
            "aXJSZWNvcmQyXzAQZUIiqgIfZW5vc19zdWJzY3JpcHRpb25fc2VydmljZS5w",
            "cm90bw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::enos_subscription_service.proto.CommonMsgType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.TransferPkg), global::enos_subscription_service.proto.TransferPkg.Parser, new[]{ "CmdId", "Data", "SeqId", "Zip", "Ver" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.AsterPkg), global::enos_subscription_service.proto.AsterPkg.Parser, new[]{ "Seqno", "Ackno", "Flag", "Wnd", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.TransferAck), global::enos_subscription_service.proto.TransferAck.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.PointAttr), global::enos_subscription_service.proto.PointAttr.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.SliceTrigger), global::enos_subscription_service.proto.SliceTrigger.Parser, new[]{ "IsSame", "SliceLen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.KVPair2_0), global::enos_subscription_service.proto.KVPair2_0.Parser, new[]{ "Point", "Value", "Domain", "Attrs", "SliceTrigger" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.KVPairDevice2_0), global::enos_subscription_service.proto.KVPairDevice2_0.Parser, new[]{ "Datas", "Device" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.KVPairRecord2_0), global::enos_subscription_service.proto.KVPairRecord2_0.Parser, new[]{ "CollectTime", "DeviceDatas", "SendTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.KVPair), global::enos_subscription_service.proto.KVPair.Parser, new[]{ "DeviceId", "Point", "Value", "Attrs", "Domain" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::enos_subscription_service.proto.KVPairRecord), global::enos_subscription_service.proto.KVPairRecord.Parser, new[]{ "Utc", "Datas", "Ts" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CommonMsgType {
    [pbr::OriginalName("ENUM_KVPairRecord2_0")] EnumKvpairRecord20 = 101,
  }

  #endregion

  #region Messages
  public sealed partial class TransferPkg : pb::IMessage<TransferPkg> {
    private static readonly pb::MessageParser<TransferPkg> _parser = new pb::MessageParser<TransferPkg>(() => new TransferPkg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferPkg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferPkg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferPkg(TransferPkg other) : this() {
      _hasBits0 = other._hasBits0;
      cmdId_ = other.cmdId_;
      data_ = other.data_;
      seqId_ = other.seqId_;
      zip_ = other.zip_;
      ver_ = other.ver_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferPkg Clone() {
      return new TransferPkg(this);
    }

    /// <summary>Field number for the "cmdId" field.</summary>
    public const int CmdIdFieldNumber = 1;
    private readonly static int CmdIdDefaultValue = 0;

    private int cmdId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CmdId {
      get { if ((_hasBits0 & 1) != 0) { return cmdId_; } else { return CmdIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cmdId_ = value;
      }
    }
    /// <summary>Gets whether the "cmdId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCmdId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cmdId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCmdId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString data_;
    /// <summary>
    ///gzip data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_ ?? DataDefaultValue; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasData {
      get { return data_ != null; }
    }
    /// <summary>Clears the value of the "data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      data_ = null;
    }

    /// <summary>Field number for the "seqId" field.</summary>
    public const int SeqIdFieldNumber = 3;
    private readonly static int SeqIdDefaultValue = 0;

    private int seqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqId {
      get { if ((_hasBits0 & 2) != 0) { return seqId_; } else { return SeqIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        seqId_ = value;
      }
    }
    /// <summary>Gets whether the "seqId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeqId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "seqId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeqId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "zip" field.</summary>
    public const int ZipFieldNumber = 4;
    private readonly static bool ZipDefaultValue = false;

    private bool zip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Zip {
      get { if ((_hasBits0 & 4) != 0) { return zip_; } else { return ZipDefaultValue; } }
      set {
        _hasBits0 |= 4;
        zip_ = value;
      }
    }
    /// <summary>Gets whether the "zip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZip {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "zip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZip() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 5;
    private readonly static uint VerDefaultValue = 0;

    private uint ver_;
    /// <summary>
    ///version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { if ((_hasBits0 & 8) != 0) { return ver_; } else { return VerDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ver_ = value;
      }
    }
    /// <summary>Gets whether the "ver" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVer {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ver" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVer() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferPkg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferPkg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdId != other.CmdId) return false;
      if (Data != other.Data) return false;
      if (SeqId != other.SeqId) return false;
      if (Zip != other.Zip) return false;
      if (Ver != other.Ver) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCmdId) hash ^= CmdId.GetHashCode();
      if (HasData) hash ^= Data.GetHashCode();
      if (HasSeqId) hash ^= SeqId.GetHashCode();
      if (HasZip) hash ^= Zip.GetHashCode();
      if (HasVer) hash ^= Ver.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCmdId) {
        output.WriteRawTag(8);
        output.WriteInt32(CmdId);
      }
      if (HasData) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (HasSeqId) {
        output.WriteRawTag(24);
        output.WriteInt32(SeqId);
      }
      if (HasZip) {
        output.WriteRawTag(32);
        output.WriteBool(Zip);
      }
      if (HasVer) {
        output.WriteRawTag(40);
        output.WriteUInt32(Ver);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCmdId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CmdId);
      }
      if (HasData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (HasSeqId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqId);
      }
      if (HasZip) {
        size += 1 + 1;
      }
      if (HasVer) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferPkg other) {
      if (other == null) {
        return;
      }
      if (other.HasCmdId) {
        CmdId = other.CmdId;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      if (other.HasSeqId) {
        SeqId = other.SeqId;
      }
      if (other.HasZip) {
        Zip = other.Zip;
      }
      if (other.HasVer) {
        Ver = other.Ver;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CmdId = input.ReadInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 24: {
            SeqId = input.ReadInt32();
            break;
          }
          case 32: {
            Zip = input.ReadBool();
            break;
          }
          case 40: {
            Ver = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AsterPkg : pb::IMessage<AsterPkg> {
    private static readonly pb::MessageParser<AsterPkg> _parser = new pb::MessageParser<AsterPkg>(() => new AsterPkg());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AsterPkg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsterPkg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsterPkg(AsterPkg other) : this() {
      _hasBits0 = other._hasBits0;
      seqno_ = other.seqno_;
      ackno_ = other.ackno_;
      flag_ = other.flag_;
      wnd_ = other.wnd_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsterPkg Clone() {
      return new AsterPkg(this);
    }

    /// <summary>Field number for the "seqno" field.</summary>
    public const int SeqnoFieldNumber = 1;
    private readonly static int SeqnoDefaultValue = 0;

    private int seqno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seqno {
      get { if ((_hasBits0 & 1) != 0) { return seqno_; } else { return SeqnoDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seqno_ = value;
      }
    }
    /// <summary>Gets whether the "seqno" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeqno {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seqno" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeqno() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ackno" field.</summary>
    public const int AcknoFieldNumber = 2;
    private readonly static int AcknoDefaultValue = 0;

    private int ackno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ackno {
      get { if ((_hasBits0 & 2) != 0) { return ackno_; } else { return AcknoDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ackno_ = value;
      }
    }
    /// <summary>Gets whether the "ackno" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAckno {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ackno" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAckno() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 3;
    private readonly static int FlagDefaultValue = 0;

    private int flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flag {
      get { if ((_hasBits0 & 4) != 0) { return flag_; } else { return FlagDefaultValue; } }
      set {
        _hasBits0 |= 4;
        flag_ = value;
      }
    }
    /// <summary>Gets whether the "flag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlag {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "flag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlag() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "wnd" field.</summary>
    public const int WndFieldNumber = 4;
    private readonly static int WndDefaultValue = 0;

    private int wnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wnd {
      get { if ((_hasBits0 & 8) != 0) { return wnd_; } else { return WndDefaultValue; } }
      set {
        _hasBits0 |= 8;
        wnd_ = value;
      }
    }
    /// <summary>Gets whether the "wnd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWnd {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "wnd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWnd() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 7;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_data_codec
        = pb::FieldCodec.ForBytes(58);
    private readonly pbc::RepeatedField<pb::ByteString> data_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AsterPkg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AsterPkg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seqno != other.Seqno) return false;
      if (Ackno != other.Ackno) return false;
      if (Flag != other.Flag) return false;
      if (Wnd != other.Wnd) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSeqno) hash ^= Seqno.GetHashCode();
      if (HasAckno) hash ^= Ackno.GetHashCode();
      if (HasFlag) hash ^= Flag.GetHashCode();
      if (HasWnd) hash ^= Wnd.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSeqno) {
        output.WriteRawTag(8);
        output.WriteInt32(Seqno);
      }
      if (HasAckno) {
        output.WriteRawTag(16);
        output.WriteInt32(Ackno);
      }
      if (HasFlag) {
        output.WriteRawTag(24);
        output.WriteInt32(Flag);
      }
      if (HasWnd) {
        output.WriteRawTag(32);
        output.WriteInt32(Wnd);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSeqno) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seqno);
      }
      if (HasAckno) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ackno);
      }
      if (HasFlag) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flag);
      }
      if (HasWnd) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wnd);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AsterPkg other) {
      if (other == null) {
        return;
      }
      if (other.HasSeqno) {
        Seqno = other.Seqno;
      }
      if (other.HasAckno) {
        Ackno = other.Ackno;
      }
      if (other.HasFlag) {
        Flag = other.Flag;
      }
      if (other.HasWnd) {
        Wnd = other.Wnd;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seqno = input.ReadInt32();
            break;
          }
          case 16: {
            Ackno = input.ReadInt32();
            break;
          }
          case 24: {
            Flag = input.ReadInt32();
            break;
          }
          case 32: {
            Wnd = input.ReadInt32();
            break;
          }
          case 58: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferAck : pb::IMessage<TransferAck> {
    private static readonly pb::MessageParser<TransferAck> _parser = new pb::MessageParser<TransferAck>(() => new TransferAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferAck(TransferAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferAck Clone() {
      return new TransferAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PointAttr : pb::IMessage<PointAttr> {
    private static readonly pb::MessageParser<PointAttr> _parser = new pb::MessageParser<PointAttr>(() => new PointAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointAttr(PointAttr other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointAttr Clone() {
      return new PointAttr(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointAttr other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SliceTrigger : pb::IMessage<SliceTrigger> {
    private static readonly pb::MessageParser<SliceTrigger> _parser = new pb::MessageParser<SliceTrigger>(() => new SliceTrigger());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SliceTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceTrigger(SliceTrigger other) : this() {
      _hasBits0 = other._hasBits0;
      isSame_ = other.isSame_;
      sliceLen_ = other.sliceLen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceTrigger Clone() {
      return new SliceTrigger(this);
    }

    /// <summary>Field number for the "isSame" field.</summary>
    public const int IsSameFieldNumber = 1;
    private readonly static bool IsSameDefaultValue = false;

    private bool isSame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSame {
      get { if ((_hasBits0 & 1) != 0) { return isSame_; } else { return IsSameDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isSame_ = value;
      }
    }
    /// <summary>Gets whether the "isSame" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsSame {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "isSame" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsSame() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sliceLen" field.</summary>
    public const int SliceLenFieldNumber = 2;
    private readonly static long SliceLenDefaultValue = 0L;

    private long sliceLen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SliceLen {
      get { if ((_hasBits0 & 2) != 0) { return sliceLen_; } else { return SliceLenDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sliceLen_ = value;
      }
    }
    /// <summary>Gets whether the "sliceLen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSliceLen {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sliceLen" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSliceLen() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SliceTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SliceTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSame != other.IsSame) return false;
      if (SliceLen != other.SliceLen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsSame) hash ^= IsSame.GetHashCode();
      if (HasSliceLen) hash ^= SliceLen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasIsSame) {
        output.WriteRawTag(8);
        output.WriteBool(IsSame);
      }
      if (HasSliceLen) {
        output.WriteRawTag(16);
        output.WriteInt64(SliceLen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasIsSame) {
        size += 1 + 1;
      }
      if (HasSliceLen) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SliceLen);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SliceTrigger other) {
      if (other == null) {
        return;
      }
      if (other.HasIsSame) {
        IsSame = other.IsSame;
      }
      if (other.HasSliceLen) {
        SliceLen = other.SliceLen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsSame = input.ReadBool();
            break;
          }
          case 16: {
            SliceLen = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KVPair2_0 : pb::IMessage<KVPair2_0> {
    private static readonly pb::MessageParser<KVPair2_0> _parser = new pb::MessageParser<KVPair2_0>(() => new KVPair2_0());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVPair2_0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPair2_0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPair2_0(KVPair2_0 other) : this() {
      point_ = other.point_;
      value_ = other.value_;
      domain_ = other.domain_;
      attrs_ = other.attrs_.Clone();
      sliceTrigger_ = other.sliceTrigger_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPair2_0 Clone() {
      return new KVPair2_0(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private readonly static string PointDefaultValue = "";

    private string point_;
    /// <summary>
    ///point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Point {
      get { return point_ ?? PointDefaultValue; }
      set {
        point_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPoint {
      get { return point_ != null; }
    }
    /// <summary>Clears the value of the "point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPoint() {
      point_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    /// <summary>
    ///value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 3;
    private readonly static string DomainDefaultValue = "";

    private string domain_;
    /// <summary>
    ///domain
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_ ?? DomainDefaultValue; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "domain" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDomain {
      get { return domain_ != null; }
    }
    /// <summary>Clears the value of the "domain" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDomain() {
      domain_ = null;
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::enos_subscription_service.proto.PointAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(34, global::enos_subscription_service.proto.PointAttr.Parser);
    private readonly pbc::RepeatedField<global::enos_subscription_service.proto.PointAttr> attrs_ = new pbc::RepeatedField<global::enos_subscription_service.proto.PointAttr>();
    /// <summary>
    ///attrs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::enos_subscription_service.proto.PointAttr> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "sliceTrigger" field.</summary>
    public const int SliceTriggerFieldNumber = 5;
    private static readonly pb::FieldCodec<global::enos_subscription_service.proto.SliceTrigger> _repeated_sliceTrigger_codec
        = pb::FieldCodec.ForMessage(42, global::enos_subscription_service.proto.SliceTrigger.Parser);
    private readonly pbc::RepeatedField<global::enos_subscription_service.proto.SliceTrigger> sliceTrigger_ = new pbc::RepeatedField<global::enos_subscription_service.proto.SliceTrigger>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::enos_subscription_service.proto.SliceTrigger> SliceTrigger {
      get { return sliceTrigger_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVPair2_0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVPair2_0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Point != other.Point) return false;
      if (Value != other.Value) return false;
      if (Domain != other.Domain) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      if(!sliceTrigger_.Equals(other.sliceTrigger_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPoint) hash ^= Point.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasDomain) hash ^= Domain.GetHashCode();
      hash ^= attrs_.GetHashCode();
      hash ^= sliceTrigger_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPoint) {
        output.WriteRawTag(10);
        output.WriteString(Point);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (HasDomain) {
        output.WriteRawTag(26);
        output.WriteString(Domain);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      sliceTrigger_.WriteTo(output, _repeated_sliceTrigger_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Point);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (HasDomain) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      size += sliceTrigger_.CalculateSize(_repeated_sliceTrigger_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVPair2_0 other) {
      if (other == null) {
        return;
      }
      if (other.HasPoint) {
        Point = other.Point;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasDomain) {
        Domain = other.Domain;
      }
      attrs_.Add(other.attrs_);
      sliceTrigger_.Add(other.sliceTrigger_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Point = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            Domain = input.ReadString();
            break;
          }
          case 34: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 42: {
            sliceTrigger_.AddEntriesFrom(input, _repeated_sliceTrigger_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KVPairDevice2_0 : pb::IMessage<KVPairDevice2_0> {
    private static readonly pb::MessageParser<KVPairDevice2_0> _parser = new pb::MessageParser<KVPairDevice2_0>(() => new KVPairDevice2_0());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVPairDevice2_0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPairDevice2_0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPairDevice2_0(KVPairDevice2_0 other) : this() {
      datas_ = other.datas_.Clone();
      device_ = other.device_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPairDevice2_0 Clone() {
      return new KVPairDevice2_0(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::enos_subscription_service.proto.KVPair2_0> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::enos_subscription_service.proto.KVPair2_0.Parser);
    private readonly pbc::RepeatedField<global::enos_subscription_service.proto.KVPair2_0> datas_ = new pbc::RepeatedField<global::enos_subscription_service.proto.KVPair2_0>();
    /// <summary>
    ///data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::enos_subscription_service.proto.KVPair2_0> Datas {
      get { return datas_; }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 2;
    private readonly static string DeviceDefaultValue = "";

    private string device_;
    /// <summary>
    ///device id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_ ?? DeviceDefaultValue; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "device" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDevice {
      get { return device_ != null; }
    }
    /// <summary>Clears the value of the "device" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDevice() {
      device_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVPairDevice2_0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVPairDevice2_0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      if (Device != other.Device) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      if (HasDevice) hash ^= Device.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
      if (HasDevice) {
        output.WriteRawTag(18);
        output.WriteString(Device);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      if (HasDevice) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVPairDevice2_0 other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
      if (other.HasDevice) {
        Device = other.Device;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
          case 18: {
            Device = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KVPairRecord2_0 : pb::IMessage<KVPairRecord2_0> {
    private static readonly pb::MessageParser<KVPairRecord2_0> _parser = new pb::MessageParser<KVPairRecord2_0>(() => new KVPairRecord2_0());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVPairRecord2_0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.CommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPairRecord2_0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPairRecord2_0(KVPairRecord2_0 other) : this() {
      _hasBits0 = other._hasBits0;
      collectTime_ = other.collectTime_;
      deviceDatas_ = other.deviceDatas_.Clone();
      sendTime_ = other.sendTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPairRecord2_0 Clone() {
      return new KVPairRecord2_0(this);
    }

    /// <summary>Field number for the "collectTime" field.</summary>
    public const int CollectTimeFieldNumber = 1;
    private readonly static long CollectTimeDefaultValue = 0L;

    private long collectTime_;
    /// <summary>
    ///collect time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CollectTime {
      get { if ((_hasBits0 & 1) != 0) { return collectTime_; } else { return CollectTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        collectTime_ = value;
      }
    }
    /// <summary>Gets whether the "collectTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollectTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "collectTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCollectTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "deviceDatas" field.</summary>
    public const int DeviceDatasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::enos_subscription_service.proto.KVPairDevice2_0> _repeated_deviceDatas_codec
        = pb::FieldCodec.ForMessage(18, global::enos_subscription_service.proto.KVPairDevice2_0.Parser);
    private readonly pbc::RepeatedField<global::enos_subscription_service.proto.KVPairDevice2_0> deviceDatas_ = new pbc::RepeatedField<global::enos_subscription_service.proto.KVPairDevice2_0>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::enos_subscription_service.proto.KVPairDevice2_0> DeviceDatas {
      get { return deviceDatas_; }
    }

    /// <summary>Field number for the "sendTime" field.</summary>
    public const int SendTimeFieldNumber = 3;
    private readonly static long SendTimeDefaultValue = 0L;

    private long sendTime_;
    /// <summary>
    ///send time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { if ((_hasBits0 & 2) != 0) { return sendTime_; } else { return SendTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sendTime_ = value;
      }
    }
    /// <summary>Gets whether the "sendTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sendTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVPairRecord2_0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVPairRecord2_0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CollectTime != other.CollectTime) return false;
      if(!deviceDatas_.Equals(other.deviceDatas_)) return false;
      if (SendTime != other.SendTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCollectTime) hash ^= CollectTime.GetHashCode();
      hash ^= deviceDatas_.GetHashCode();
      if (HasSendTime) hash ^= SendTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCollectTime) {
        output.WriteRawTag(8);
        output.WriteInt64(CollectTime);
      }
      deviceDatas_.WriteTo(output, _repeated_deviceDatas_codec);
      if (HasSendTime) {
        output.WriteRawTag(24);
        output.WriteInt64(SendTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCollectTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CollectTime);
      }
      size += deviceDatas_.CalculateSize(_repeated_deviceDatas_codec);
      if (HasSendTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVPairRecord2_0 other) {
      if (other == null) {
        return;
      }
      if (other.HasCollectTime) {
        CollectTime = other.CollectTime;
      }
      deviceDatas_.Add(other.deviceDatas_);
      if (other.HasSendTime) {
        SendTime = other.SendTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CollectTime = input.ReadInt64();
            break;
          }
          case 18: {
            deviceDatas_.AddEntriesFrom(input, _repeated_deviceDatas_codec);
            break;
          }
          case 24: {
            SendTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KVPair : pb::IMessage<KVPair> {
    private static readonly pb::MessageParser<KVPair> _parser = new pb::MessageParser<KVPair>(() => new KVPair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.CommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPair(KVPair other) : this() {
      deviceId_ = other.deviceId_;
      point_ = other.point_;
      value_ = other.value_;
      attrs_ = other.attrs_.Clone();
      domain_ = other.domain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPair Clone() {
      return new KVPair(this);
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private readonly static string DeviceIdDefaultValue = "";

    private string deviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_ ?? DeviceIdDefaultValue; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "deviceId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeviceId {
      get { return deviceId_ != null; }
    }
    /// <summary>Clears the value of the "deviceId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeviceId() {
      deviceId_ = null;
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private readonly static string PointDefaultValue = "";

    private string point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Point {
      get { return point_ ?? PointDefaultValue; }
      set {
        point_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPoint {
      get { return point_ != null; }
    }
    /// <summary>Clears the value of the "point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPoint() {
      point_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::enos_subscription_service.proto.PointAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(34, global::enos_subscription_service.proto.PointAttr.Parser);
    private readonly pbc::RepeatedField<global::enos_subscription_service.proto.PointAttr> attrs_ = new pbc::RepeatedField<global::enos_subscription_service.proto.PointAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::enos_subscription_service.proto.PointAttr> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 5;
    private readonly static string DomainDefaultValue = "";

    private string domain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_ ?? DomainDefaultValue; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "domain" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDomain {
      get { return domain_ != null; }
    }
    /// <summary>Clears the value of the "domain" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDomain() {
      domain_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (Point != other.Point) return false;
      if (Value != other.Value) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      if (Domain != other.Domain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDeviceId) hash ^= DeviceId.GetHashCode();
      if (HasPoint) hash ^= Point.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      hash ^= attrs_.GetHashCode();
      if (HasDomain) hash ^= Domain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasDeviceId) {
        output.WriteRawTag(10);
        output.WriteString(DeviceId);
      }
      if (HasPoint) {
        output.WriteRawTag(18);
        output.WriteString(Point);
      }
      if (HasValue) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (HasDomain) {
        output.WriteRawTag(42);
        output.WriteString(Domain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDeviceId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (HasPoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Point);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (HasDomain) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVPair other) {
      if (other == null) {
        return;
      }
      if (other.HasDeviceId) {
        DeviceId = other.DeviceId;
      }
      if (other.HasPoint) {
        Point = other.Point;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      attrs_.Add(other.attrs_);
      if (other.HasDomain) {
        Domain = other.Domain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceId = input.ReadString();
            break;
          }
          case 18: {
            Point = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 42: {
            Domain = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KVPairRecord : pb::IMessage<KVPairRecord> {
    private static readonly pb::MessageParser<KVPairRecord> _parser = new pb::MessageParser<KVPairRecord>(() => new KVPairRecord());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KVPairRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::enos_subscription_service.proto.CommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPairRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPairRecord(KVPairRecord other) : this() {
      _hasBits0 = other._hasBits0;
      utc_ = other.utc_;
      datas_ = other.datas_.Clone();
      ts_ = other.ts_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KVPairRecord Clone() {
      return new KVPairRecord(this);
    }

    /// <summary>Field number for the "utc" field.</summary>
    public const int UtcFieldNumber = 1;
    private readonly static long UtcDefaultValue = 0L;

    private long utc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Utc {
      get { if ((_hasBits0 & 1) != 0) { return utc_; } else { return UtcDefaultValue; } }
      set {
        _hasBits0 |= 1;
        utc_ = value;
      }
    }
    /// <summary>Gets whether the "utc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUtc {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "utc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUtc() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::enos_subscription_service.proto.KVPair> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(18, global::enos_subscription_service.proto.KVPair.Parser);
    private readonly pbc::RepeatedField<global::enos_subscription_service.proto.KVPair> datas_ = new pbc::RepeatedField<global::enos_subscription_service.proto.KVPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::enos_subscription_service.proto.KVPair> Datas {
      get { return datas_; }
    }

    /// <summary>Field number for the "ts" field.</summary>
    public const int TsFieldNumber = 3;
    private readonly static long TsDefaultValue = 0L;

    private long ts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ts {
      get { if ((_hasBits0 & 2) != 0) { return ts_; } else { return TsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ts_ = value;
      }
    }
    /// <summary>Gets whether the "ts" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ts" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTs() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KVPairRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KVPairRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Utc != other.Utc) return false;
      if(!datas_.Equals(other.datas_)) return false;
      if (Ts != other.Ts) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUtc) hash ^= Utc.GetHashCode();
      hash ^= datas_.GetHashCode();
      if (HasTs) hash ^= Ts.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasUtc) {
        output.WriteRawTag(8);
        output.WriteInt64(Utc);
      }
      datas_.WriteTo(output, _repeated_datas_codec);
      if (HasTs) {
        output.WriteRawTag(24);
        output.WriteInt64(Ts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUtc) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Utc);
      }
      size += datas_.CalculateSize(_repeated_datas_codec);
      if (HasTs) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ts);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KVPairRecord other) {
      if (other == null) {
        return;
      }
      if (other.HasUtc) {
        Utc = other.Utc;
      }
      datas_.Add(other.datas_);
      if (other.HasTs) {
        Ts = other.Ts;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Utc = input.ReadInt64();
            break;
          }
          case 18: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
          case 24: {
            Ts = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
